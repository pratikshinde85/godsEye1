/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.mycompany.thirdeye_facematch;

import com.amazonaws.AmazonServiceException;
import com.amazonaws.SdkClientException;
import com.amazonaws.regions.Regions;
import com.amazonaws.services.rekognition.AmazonRekognition;
import com.amazonaws.services.rekognition.AmazonRekognitionClientBuilder;
import com.amazonaws.services.rekognition.model.AmazonRekognitionException;
import com.amazonaws.services.rekognition.model.FaceMatch;
import com.amazonaws.services.rekognition.model.S3Object;
import com.amazonaws.services.rekognition.model.SearchFacesByImageRequest;
import com.amazonaws.services.rekognition.model.SearchFacesByImageResult;
import com.amazonaws.services.s3.AmazonS3;
import com.amazonaws.services.s3.AmazonS3ClientBuilder;
import com.amazonaws.services.s3.model.ObjectMetadata;
import com.amazonaws.services.s3.model.PutObjectRequest;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import java.awt.Dimension;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.net.URL;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;


public class face_rekognition extends javax.swing.JFrame {

    public face_rekognition() {
        initComponents();
        sketch_path.setVisible(false);
        match_path.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        sketch = new javax.swing.JLabel();
        match = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        open_sketch = new javax.swing.JButton();
        upload_sketch = new javax.swing.JButton();
        find_match = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        match_properties = new javax.swing.JTextArea();
        match_similarity = new javax.swing.JLabel();
        jSeparator2 = new javax.swing.JSeparator();
        sketch_path = new javax.swing.JTextField();
        match_path = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("God's Eye");
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setExtendedState(MAXIMIZED_BOTH);

        sketch.setAlignmentX(300.0F);
        sketch.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        match.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 1, 1, new java.awt.Color(0, 0, 102)));
        match.setMaximumSize(new java.awt.Dimension(500, 600));

        open_sketch.setText("OPEN SKETCH");
        open_sketch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                open_sketchActionPerformed(evt);
            }
        });

        upload_sketch.setText("UPLOAD SKETCH");
        upload_sketch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                upload_sketchActionPerformed(evt);
            }
        });

        find_match.setText("FIND MATCH");
        find_match.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                find_matchActionPerformed(evt);
            }
        });

        jScrollPane1.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane1.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);
        jScrollPane1.setHorizontalScrollBar(null);

        match_properties.setEditable(false);
        match_properties.setColumns(20);
        match_properties.setFont(new java.awt.Font("Segoe UI", 3, 24)); // NOI18N
        match_properties.setRows(5);
        match_properties.setAutoscrolls(false);
        jScrollPane1.setViewportView(match_properties);

        match_similarity.setFont(new java.awt.Font("Roboto", 1, 18)); // NOI18N
        match_similarity.setForeground(new java.awt.Color(0, 204, 0));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jSeparator1)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(sketch, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(match, javax.swing.GroupLayout.PREFERRED_SIZE, 452, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(open_sketch, javax.swing.GroupLayout.DEFAULT_SIZE, 275, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(upload_sketch, javax.swing.GroupLayout.DEFAULT_SIZE, 290, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(find_match, javax.swing.GroupLayout.DEFAULT_SIZE, 269, Short.MAX_VALUE))
                    .addComponent(match_similarity, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jSeparator2, javax.swing.GroupLayout.Alignment.TRAILING))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(sketch_path, javax.swing.GroupLayout.DEFAULT_SIZE, 516, Short.MAX_VALUE)
                    .addComponent(match_path)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(50, 50, 50)
                .addComponent(match_similarity, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(1, 1, 1)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(sketch, javax.swing.GroupLayout.PREFERRED_SIZE, 400, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(match, javax.swing.GroupLayout.PREFERRED_SIZE, 500, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1))
                .addGap(18, 18, 18)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(sketch_path, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(7, 7, 7)
                        .addComponent(match_path, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(open_sketch, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(upload_sketch, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(find_match, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    // OPEN SKETCH AND VIEW IMAGE AND PATH
    private void open_sketchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_open_sketchActionPerformed
        JFileChooser fileChooser = new JFileChooser("C:\\Users\\rutik\\Documents\\NetBeansProjects\\Project Code (forensic face sketch)\\godsEye_FaceMatch\\src\\main\\java\\com\\mycompany\\thirdeye_facematch\\sketches");
        //Limit type of file name extensions supported. 
        FileNameExtensionFilter filter = new FileNameExtensionFilter("4 Extensions Supported", "jpg", "png", "jpeg", "gif");
        fileChooser.setFileFilter(filter);
        int selected = fileChooser.showOpenDialog(null);

        //check if open button has been clicked. 
        if (selected == JFileChooser.APPROVE_OPTION) {
            File file = fileChooser.getSelectedFile();

            //Get Path of the selected image.
            String getselectedImage = file.getAbsolutePath();

            //Display image path on Message Dialog
            JOptionPane.showMessageDialog(null, "Selected Image Path is - \n" + getselectedImage);
            //
            
            BufferedImage resizedImage=null;
            try {
            String path = getselectedImage;

            // Load the original image from the local file system
            BufferedImage originalImage = ImageIO.read(new File(path));

            // Define the scaling factor (e.g., 0.5 for half the size)
            double scale = 1.3;

            // Calculate the new size
            int newWidth = (int) (originalImage.getWidth() * scale);
            int newHeight = (int) (originalImage.getHeight() * scale);

            // Create a new BufferedImage with the new size
             resizedImage= new BufferedImage(newWidth, newHeight, originalImage.getType());

            // Create a Graphics2D object to draw the resized image
            Graphics2D g2d = resizedImage.createGraphics();
            g2d.drawImage(originalImage, 0, 0, newWidth, newHeight, null);
            g2d.dispose();
            
            }
            catch(IOException e){
                e.printStackTrace();
            }
            
            //
            
            System.out.println(resizedImage.getHeight()+""+resizedImage.getWidth());
            ImageIcon imIco = new ImageIcon(resizedImage);
            sketch_path.setText(getselectedImage);
            
            //make image fit on jlabel.
            Image imFit = imIco.getImage();
            
            Image imgFit = imFit.getScaledInstance(sketch.getWidth(), sketch.getHeight(), Image.SCALE_SMOOTH);
            sketch.setPreferredSize(new Dimension(resizedImage.getHeight(), resizedImage.getWidth()));
            sketch.setIcon(new ImageIcon(imgFit));
        }
    }//GEN-LAST:event_open_sketchActionPerformed

    //UPLOAD THE SKETCH TO S3 BUCKET TO FIND A MATCH FROM AWS COLLECTION

    private void upload_sketchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_upload_sketchActionPerformed
        Regions clientRegion = Regions.US_EAST_1;
        String bucketName = "godseyestorage2";
        //String stringObjKeyName = "stringkey";
        //File name to be shown in S3 Bucket
        String fileName = sketch_path.getText();
        String fileObjKeyName = new File(fileName).getName();
        System.out.println(fileObjKeyName);
        try {
            //This code expects that you have AWS credentials set up per:
            // https://docs.aws.amazon.com/sdk-for-java/v1/developer-guide/setup-credentials.html
            AmazonS3 s3Client = AmazonS3ClientBuilder.standard()
                    .withRegion(clientRegion)
                    .build();

            // Upload a file as a new object with ContentType and title specified.
            PutObjectRequest request = new PutObjectRequest(bucketName, fileObjKeyName, new File(fileName));
            ObjectMetadata metadata = new ObjectMetadata();
            metadata.setContentType("plain/text");
            metadata.addUserMetadata("title", "someTitle");
            request.setMetadata(metadata);
            s3Client.putObject(request);

            JOptionPane.showMessageDialog(null, "Sketch Uploaded Successfully");

            match_path.setText(null); //Clears the old path data of the image 
            match.setIcon(null); //Clears the Old Matched Image
            match_similarity.setText(null); //Clears the Similarity Percentage
            match_properties.setText(null);

        } catch (AmazonServiceException e) {
            // The call was transmitted successfully, but Amazon S3 couldn't process 
            // it, so it returned an error response.
            System.out.println(e);
            JOptionPane.showMessageDialog(null, "The Sketch could not been Uploaded, Try Again \n");
        } catch (SdkClientException e) {
            // Amazon S3 couldn't be contacted for a response, or the client
            // couldn't parse the response from Amazon S3.
            System.out.println(e);
            JOptionPane.showMessageDialog(null, "The Sketch could not been Uploaded, Try Again \n");
        }
    }//GEN-LAST:event_upload_sketchActionPerformed

    /* private void upload_sketchActionPerformed(java.awt.event.ActionEvent evt) {                                              
    Regions clientRegion = Regions.US_EAST_1;
    String bucketName = "my-gk";
    String folderPath = "D:\\finalyear\\Project Code (forensic face sketch)\\ThirdEye_FaceMatch\\src\\main\\java\\com\\mycompany\\thirdeye_facematch\\faces";

    try {
        // Set up Amazon S3 client
        AmazonS3 s3Client = AmazonS3ClientBuilder.standard()
                .withRegion(clientRegion)
                .build();

        File folder = new File(folderPath);
        File[] files = folder.listFiles();

        if (files != null) {
            for (File file : files) {
                if (file.isFile()) {
                    // Upload each file in the folder to S3
                    uploadImageToS3(s3Client, bucketName, file);
                }
            }
        } else {
            System.out.println("No files found in the specified folder.");
        }

        // Display success message
        JOptionPane.showMessageDialog(null, "Sketches Uploaded Successfully");

        // Clear old data in UI components
        match_path.setText(null);         // Clears the old path data of the image
        match.setIcon(null);              // Clears the old matched image
        match_similarity.setText(null);    // Clears the similarity percentage
        match_properties.setText(null);    // Clears any previous match properties

    } catch (AmazonServiceException e) {
        // Handle Amazon S3 service exception
        System.out.println(e);
        JOptionPane.showMessageDialog(null, "Sketches could not be Uploaded. Please try again.\n");

    } catch (SdkClientException e) {
        // Handle SDK client exception
        System.out.println(e);
        JOptionPane.showMessageDialog(null, "Sketches could not be Uploaded. Please try again.\n");
    }
} 

private void uploadImageToS3(AmazonS3 s3Client, String bucketName, File file) {
    try {
        String key = file.getName();  // Use the file name as the object key

        PutObjectRequest request = new PutObjectRequest(bucketName, key, file);
        ObjectMetadata metadata = new ObjectMetadata();
        metadata.setContentType("plain/text");
        metadata.addUserMetadata("title", "someTitle");
        request.setMetadata(metadata);

        s3Client.putObject(request);

        System.out.println("Image '" + key + "' uploaded successfully.");

    } catch (Exception e) {
        System.out.println("Failed to upload image: " + e.getMessage());
    }
}
     */
    //FIND MATCH FROM THE AWS COLLECTION AND SHOW RESULTS
    private void find_matchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_find_matchActionPerformed
        String collectionId = "Records";
        String bucket = "godseyestorage2";
        String file = sketch_path.getText();

        String photo = new File(file).getName();

        AmazonRekognition rekognitionClient = AmazonRekognitionClientBuilder.defaultClient();

        ObjectMapper objectMapper = new ObjectMapper();

        // Get an image object from S3 bucket.
        com.amazonaws.services.rekognition.model.Image image = new com.amazonaws.services.rekognition.model.Image()
                .withS3Object(new S3Object()
                        .withBucket(bucket)
                        .withName(photo));

        // Search collection for faces similar to the largest face in the image.
        SearchFacesByImageRequest searchFacesByImageRequest = new SearchFacesByImageRequest()
                .withCollectionId(collectionId)
                .withImage(image)
                .withFaceMatchThreshold(70F)
                .withMaxFaces(2);

        SearchFacesByImageResult searchFacesByImageResult
                = rekognitionClient.searchFacesByImage(searchFacesByImageRequest);

        List< FaceMatch> faceImageMatches = searchFacesByImageResult.getFaceMatches();
        faceImageMatches.forEach((FaceMatch face) -> {
            try {
                System.out.println(objectMapper.writerWithDefaultPrettyPrinter()
                        .writeValueAsString(face));

                match_path.setText(face.getFace().getExternalImageId()); //Used for verifing and No Match

                //Display the Similarity Percentage on the Screen
                match_similarity.setText("SIMILARITY : " + face.getSimilarity());

                // Display Properties
                match_properties.setText("******************************************** \n"
                        + "FACE MATCHED \n"
                        + "******************************************** \n"
                        + "\n"
                        + "\n"
                        + "Name in database: " + face.getFace().getExternalImageId() + "\n"
                        + "\n"
                        + "\n"
                        + "Similarity: " + face.getSimilarity() + "\n"
                        + "\n"
                        + "\n"
                        + "Confidence: " + face.getFace().getConfidence() + "\n");

                // Display Matched Images in the JLABEL 
                //String path = "https://godseyestorage2.s3.us-east-1.amazonaws.com/" + face.getFace().getExternalImageId();
                String path = "https://my-gk.s3.amazonaws.com/" + face.getFace().getExternalImageId();
                        

                // Load image from URL without displaying it
                System.out.println("Label Width: " + match.getWidth());
                System.out.println("Label Height: " + match.getHeight());
                //
                String externalImageId = face.getFace().getExternalImageId();
                ImageIcon scaledIcon=null;
                int lastDotIndex = externalImageId.lastIndexOf(".");
                System.out.println(lastDotIndex);
                if (lastDotIndex != -1) {
                    String fileExtension = externalImageId.substring(lastDotIndex + 1);
                    System.out.println("File Extension: " + fileExtension);
                    if (fileExtension.equals("jpg")) {
                        System.out.println("done");
                        try {
                            BufferedImage originalImage = ImageIO.read(new URL(path));

                            // Define the scaling factor (e.g., 2.0 for doubling the size)
                            double scale = 2;

                            // Calculate the new size
                            int newWidth = (int) (originalImage.getWidth() * scale);
                            int newHeight = (int) (originalImage.getHeight() * scale);
                            System.out.println(newHeight+"hii");
                             if(newHeight>800){
                                 newHeight=800;
                             }
                            // Create a new BufferedImage with the new size
                            BufferedImage resizedImage = new BufferedImage(newWidth, newHeight, originalImage.getType());

                            // Create a Graphics2D object to draw the resized image
                            Graphics2D g2d = resizedImage.createGraphics();
                            g2d.drawImage(originalImage, 0, 0, newWidth, newHeight, null);
                            g2d.dispose();

                            // You can now use or save the resized image as needed
                            // For example, display the image in a JFrame or save it to a file
                             scaledIcon= new ImageIcon(resizedImage);
                            System.out.println("Image resized successfully.");
                        } catch (IOException e) {
                        }
                    }

                } else {
                    path = path + "." + "jpeg";
                }
                System.out.println("Get Image from " + path);
                try {
                    URL url = new URL(path);

                    BufferedImage image1 = ImageIO.read(new URL(path));

                    // Check the image dimensions
                    int imageWidth = image1.getWidth();
                    int imageHeight = image1.getHeight();

                    System.out.println("Image Width: " + imageWidth);
                    System.out.println("Image Height: " + imageHeight);
                    if(imageHeight>800){
                        imageHeight=600;
                    }
                    System.out.println(imageHeight);
                    match.setPreferredSize(new Dimension(imageHeight, 500));
                    if(lastDotIndex!=-1){
                    match.setIcon(scaledIcon);
                    }
                    else{
                    match.setIcon(new ImageIcon(url));
                    }
                    System.out.println(url);
                } catch (IOException e) {
                    System.out.println(e);

                }
            } catch (JsonProcessingException ex) {
                System.out.println(ex);
                Logger.getLogger(face_rekognition.class.getName()).log(Level.SEVERE, null, ex);
            }
        });
        if (match_path.getText().isEmpty()) { // IF THE SKETCH DOES NOT MATCH
            System.out.println("NO MATCH FOUND");
            JOptionPane.showMessageDialog(null, "No Match Found in the Database !! \n");
            match.setIcon(null);
        }
    }//GEN-LAST:event_find_matchActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(face_rekognition.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new face_rekognition().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton find_match;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JLabel match;
    private javax.swing.JTextField match_path;
    private javax.swing.JTextArea match_properties;
    private javax.swing.JLabel match_similarity;
    private javax.swing.JButton open_sketch;
    private javax.swing.JLabel sketch;
    private javax.swing.JTextField sketch_path;
    private javax.swing.JButton upload_sketch;
    // End of variables declaration//GEN-END:variables
}
